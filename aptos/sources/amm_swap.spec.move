spec cetus_amm::amm_swap {
    spec module {
        pragma verify = false;
        pragma aborts_if_is_partial;
    }

    spec Pool {
        // invariant coin::value(locked_liquidity) == 0 || coin::value(locked_liquidity) == 10;
        // If one of the reserves of coin_a and coin_b in the pool is 0, the other must also be 0,
        // and if one is not 0, then the other is not 0 either.
        invariant coin::value(coin_a) != 0 ==> coin::value(coin_b) != 0;
        invariant coin::value(coin_b) != 0 ==> coin::value(coin_a) != 0;
        invariant coin::value(coin_a) == 0 ==> coin::value(coin_b) == 0;
        invariant coin::value(coin_b) == 0 ==> coin::value(coin_a) == 0;
    }

    spec mint<CoinTypeA, CoinTypeB>(
        coinA: Coin<CoinTypeA>,
        coinB: Coin<CoinTypeB>): Coin<PoolLiquidityCoin<CoinTypeA, CoinTypeB>> {
        pragma verify = true;

        // Get deposited amounts.
        let amountA = coin::value(coinA);
        let amountB = coin::value(coinB);

        // LP token for this minting.
        let post to_mint_lp_value = coin::value(result);

        // Pool before minting.
        let old_pool = global<Pool<CoinTypeA, CoinTypeB>>(amm_config::admin_address());
        // Pool after minting.
        let post new_pool = global<Pool<CoinTypeA, CoinTypeB>>(amm_config::admin_address());

        // The coin_a and coin_b in the pool are the old value plus the value required for this minting.
        ensures coin::value(new_pool.coin_a) == coin::value(old_pool.coin_a) + amountA;
        ensures coin::value(new_pool.coin_b) == coin::value(old_pool.coin_b) + amountB;
        // The LP token after minting is greater than the LP token before minting.
        ensures new_pool.total_supply > old_pool.total_supply;
        // If the old LP value is 0, then the new LP value after minting is the liquidity of this casting plus the minimum liquidity,
        // otherwise the new LP value is the liquidity of this casting plus the old LP value.
        ensures if (old_pool.total_supply == 0) { MINIMUM_LIQUIDITY + to_mint_lp_value == new_pool.total_supply } else { old_pool.total_supply + to_mint_lp_value == new_pool.total_supply };
        // If the old LP value is 0, the old locked_liquidity is also 0.
        ensures old_pool.total_supply == 0 ==> coin::value(old_pool.locked_liquidity) == 0;
    }

    spec burn<CoinTypeA, CoinTypeB>(to_burn: Coin<PoolLiquidityCoin<CoinTypeA, CoinTypeB>>): (Coin<CoinTypeA>, Coin<CoinTypeB>) {
        pragma verify = true;

        // Amount of lp burned.
        let to_burn_lp_value = coin::value(to_burn);

        // Amount of tokenA withdrawn.
        let post amountA = coin::value(result_1);
        // Amount of tokenB withdrawn.
        let post amountB = coin::value(result_2);

        // Old pool.
        let old_pool = global<Pool<CoinTypeA, CoinTypeB>>(amm_config::admin_address());
        // New pool.
        let post new_pool = global<Pool<CoinTypeA, CoinTypeB>>(amm_config::admin_address());

        // The coin_a and coin_b in the pool are the old value minus the coin_a and coin_b generated by this burn.
        ensures coin::value(new_pool.coin_a) == coin::value(old_pool.coin_a) - amountA;
        ensures coin::value(new_pool.coin_b) == coin::value(old_pool.coin_b) - amountB;
        // Burned LP tokens plus burned LP tokens are equal to LP tokens before burning.
        ensures new_pool.total_supply + to_burn_lp_value == old_pool.total_supply;
    }
}
